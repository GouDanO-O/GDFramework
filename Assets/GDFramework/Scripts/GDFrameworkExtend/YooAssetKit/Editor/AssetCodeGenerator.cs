#if UNITY_EDITOR
using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace YooAsset.Editor
{
    public class AssetCodeGenerator
    {
        [MenuItem("YooAsset/Generate Asset Code", false, 102)]
        public static void GenerateAssetCode()
        {
            StringBuilder codeBuilder = new StringBuilder();
            
            // Add file header
            codeBuilder.AppendLine("// This file is auto-generated by YooAsset AssetCodeGenerator");
            codeBuilder.AppendLine("// Do not modify this file - your changes will be lost");
            codeBuilder.AppendLine();
            
            // Add namespace
            codeBuilder.AppendLine("namespace YooAsset");
            codeBuilder.AppendLine("{");
            
            // Begin main Assets class
            codeBuilder.AppendLine("    /// <summary>");
            codeBuilder.AppendLine("    /// Asset path constants for use with YooAsset");
            codeBuilder.AppendLine("    /// </summary>");
            codeBuilder.AppendLine("    public static class Assets");
            codeBuilder.AppendLine("    {");
            
            // Process each package
            foreach (var package in AssetBundleCollectorSettingData.Setting.Packages)
            {
                ProcessPackage(package, codeBuilder);
            }
            
            // End class and namespace
            codeBuilder.AppendLine("    }");
            codeBuilder.AppendLine("}");
            
            // Write to file
            SaveToFile(codeBuilder.ToString());
            
            Debug.Log("YooAsset code generation completed!");
            AssetDatabase.Refresh();
        }
        
        private static void ProcessPackage(AssetBundleCollectorPackage package, StringBuilder codeBuilder)
        {
            codeBuilder.AppendLine();
            codeBuilder.AppendLine($"        /// <summary>");
            codeBuilder.AppendLine($"        /// Assets in package: {package.PackageName}");
            codeBuilder.AppendLine($"        /// </summary>");
            codeBuilder.AppendLine($"        public static class {SanitizeIdentifier(package.PackageName)}");
            codeBuilder.AppendLine("        {");
            
            // Process each group within the package
            foreach (var group in package.Groups)
            {
                ProcessGroup(group, codeBuilder);
            }
            
            codeBuilder.AppendLine("        }");
        }
        
        private static void ProcessGroup(AssetBundleCollectorGroup group, StringBuilder codeBuilder)
        {
            if (!IsGroupActive(group))
                return;
                
            codeBuilder.AppendLine();
            codeBuilder.AppendLine($"            /// <summary>");
            codeBuilder.AppendLine($"            /// Assets in group: {group.GroupName}");
            if (!string.IsNullOrEmpty(group.GroupDesc))
                codeBuilder.AppendLine($"            /// {group.GroupDesc}");
            codeBuilder.AppendLine($"            /// </summary>");
            codeBuilder.AppendLine($"            public static class {SanitizeIdentifier(group.GroupName)}");
            codeBuilder.AppendLine("            {");
            
            // Process collectors within the group
            foreach (var collector in group.Collectors)
            {
                if (string.IsNullOrEmpty(collector.CollectPath))
                    continue;
                    
                ProcessCollector(collector, codeBuilder);
            }
            
            codeBuilder.AppendLine("            }");
        }
        
        private static void ProcessCollector(AssetBundleCollector collector, StringBuilder codeBuilder)
        {
            try
            {
                if (collector.CollectorType == ECollectorType.MainAssetCollector || 
                    collector.CollectorType == ECollectorType.StaticAssetCollector)
                {
                    string collectPath = collector.CollectPath;
                    
                    // Handle folder collection
                    if (AssetDatabase.IsValidFolder(collectPath))
                    {
                        ProcessFolder(collectPath, codeBuilder);
                    }
                    // Handle single asset collection
                    else
                    {
                        ProcessSingleAsset(collectPath, codeBuilder);
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"Error processing collector {collector.CollectPath}: {ex.Message}");
            }
        }
        
        private static void ProcessFolder(string folderPath, StringBuilder codeBuilder)
        {
            // Get all asset files in the folder and its subfolders
            string[] assetGuids = AssetDatabase.FindAssets("t:Object", new[] { folderPath });
            
            foreach (string guid in assetGuids)
            {
                string assetPath = AssetDatabase.GUIDToAssetPath(guid);
                
                // Skip folders and certain file types
                if (AssetDatabase.IsValidFolder(assetPath) || 
                    assetPath.EndsWith(".cs") || 
                    assetPath.EndsWith(".js") || 
                    assetPath.EndsWith(".dll"))
                    continue;
                    
                ProcessSingleAsset(assetPath, codeBuilder);
            }
        }
        
        private static void ProcessSingleAsset(string assetPath, StringBuilder codeBuilder)
        {
            if (string.IsNullOrEmpty(assetPath) || !File.Exists(assetPath))
                return;
                
            // Get a clean asset name for the constant
            string assetName = Path.GetFileNameWithoutExtension(assetPath);
            string constantName = SanitizeIdentifier(assetName);
            
            // Skip invalid names
            if (string.IsNullOrEmpty(constantName) || char.IsDigit(constantName[0]))
                constantName = "_" + constantName;
                
            if (string.IsNullOrEmpty(constantName))
                return;
                
            // Add the constant declaration
            codeBuilder.AppendLine($"                /// <summary>Asset: {assetPath}</summary>");
            codeBuilder.AppendLine($"                public const string {constantName} = \"{assetPath}\";");
            codeBuilder.AppendLine();
        }
        
        private static bool IsGroupActive(AssetBundleCollectorGroup group)
        {
            IActiveRule activeRule = AssetBundleCollectorSettingData.GetActiveRuleInstance(group.ActiveRuleName);
            return activeRule.IsActiveGroup(new GroupData(group.GroupName));
        }
        
        private static string SanitizeIdentifier(string input)
        {
            if (string.IsNullOrEmpty(input))
                return "Default";
                
            // Replace non-alphanumeric characters with underscores
            StringBuilder sb = new StringBuilder();
            
            foreach (char c in input)
            {
                if (char.IsLetterOrDigit(c))
                    sb.Append(c);
                else
                    sb.Append('_');
            }
            
            string result = sb.ToString();
            
            // Ensure it doesn't start with a number
            if (char.IsDigit(result[0]))
                result = "_" + result;
                
            return result;
        }
        
        private static void SaveToFile(string content)
        {
            // Create the Scripts directory if it doesn't exist
            string directoryPath = "Assets/Scripts/YooAsset";
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }
            
            // Write the generated code to a file
            string filePath = Path.Combine(directoryPath, "AssetPathConstants.cs");
            File.WriteAllText(filePath, content, Encoding.UTF8);
            
            Debug.Log($"Asset constants saved to {filePath}");
        }
    }
}
#endif